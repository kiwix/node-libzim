# Much of this is borrowed from node-sqlite3 and node-icu-bidi.
sudo: false

language: cpp

git:
  depth: 10

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - liblzma-dev:i386
    packages:
    - gcc-5-multilib
    - g++-5-multilib
    - libc6-dev:i386
    - liblzma-dev

## don't re-build for tags so that [publish binary] is not re-run
## https://github.com/travis-ci/travis-ci/issues/1532
#branches:
#  except:
#    - /^[0-9]+[.][0-9]+[.][0-9]+/


matrix:
  include:
     # Linux
     - os: linux
       env: NODE_VERSION="node" # latest
     - os: linux
       compiler: clang
       env: NODE_VERSION="10.9.0" PUBLISHABLE=true
     - os: linux
       compiler: clang
       env: NODE_VERSION="9.9.0"
     - os: linux
       env: NODE_VERSION="8.9.4"
     # OS X
     - os: osx
       compiler: clang
       env: NODE_VERSION="10.9.0"
     - os: osx
       compiler: clang
       env: NODE_VERSION="9.9.0"
     - os: osx
       compiler: clang
       env: NODE_VERSION="8.9.4"

env:
  global:
   - LLVM_VERSION=3.8.0
   - secure: "p/3rptxI8KJGhU1omrUu2WRClXhVwbRoWC3YfjaQr6rDMUMkmARc4tWT1UnL6e7bKAG2vKO9ko1d3meT6rHZL8ma/I5z9tvm3gefxLdIeV1I93JNX3nCLNkCDdIOcHEFibr1R8qsrcLqTaVoLMBhnNxFEvUFLbebD3ArFBy0zxY="

cache:
  ccache: true
  directories:
    - $HOME/llvm-$LLVM_VERSION

before_install:
- export PUBLISHABLE=${PUBLISHABLE:-true}
- if test "$TRAVIS_OS_NAME" = "osx clang" ; then
    brew update;
    brew install xz;
  fi
- if test "$TRAVIS_OS_NAME $CC" = "linux clang" ; then
    if [ -z "$(ls -A $HOME/llvm-$LLVM_VERSION)" ]; then
      wget -O $HOME/llvm-$LLVM_VERSION.tar.xz http://llvm.org/releases/$LLVM_VERSION/clang+llvm-$LLVM_VERSION-x86_64-linux-gnu-ubuntu-14.04.tar.xz;
      mkdir $HOME/llvm-$LLVM_VERSION;
      xzcat $HOME/llvm-$LLVM_VERSION.tar.xz | tar -xvf - --strip 1 -C $HOME/llvm-$LLVM_VERSION;
    fi;
    export LLVM_CONFIG="$HOME/llvm-$LLVM_VERSION/bin/llvm-config";
    export PATH=$HOME/llvm-$LLVM_VERSION/bin:$PATH;
    llvm-config --version;
    clang --version;
    export CXX="clang++" ;
    export CC="clang" ;
  fi
- if test "$TRAVIS_OS_NAME $CC" = "linux gcc" ; then
    export CXX="g++-5" ;
    export CC="gcc-5" ;
  fi
# check if tag exists and matches package.json
- scripts/validate_tag.sh
- echo $NODE_VERSION
- rm -rf ~/.nvm/ && git clone --depth 1 https://github.com/creationix/nvm.git ~/.nvm
- source ~/.nvm/nvm.sh
- nvm install $NODE_VERSION
- nvm use $NODE_VERSION
- if test "$NODE_VERSION" = "0.8.28" ; then npm install -g npm@1.4.28 ; fi
#- npm config set spin=false
#- npm config set loglevel=http
- node --version
- npm --version

install:
# put node-pre-gyp on path
- export PATH=./node_modules/.bin/:$PATH

before_script:
# get commit message
- export COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')

script:
- node --version
- npm --version
- if test -z "$EXTERNAL_LIBZIM" ; then npm install --build-from-source ; else npm install --build-from-source --libzim=external ; fi
- node-pre-gyp package testpackage
- npm test
- export PUBLISH=false
# Normal case: tagged builds trigger 32-bit and 64-bit x86 builds
- if scripts/validate_tag.sh --check ; then PUBLISH=true; fi
# Workaround to trigger a manual x86 build
- if test "$TRAVIS_BRANCH" == "x86" -a  "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE"; then PUBLISH=true; fi
- if test "$PUBLISH,$PUBLISHABLE" = "true,true"; then npm test && npm install core-js@1.1.4 && npm install request@2.64.0 && npm run gh-publish && if test -n "$BUILD_X86"; then scripts/publish_x86.sh ; fi ; fi
